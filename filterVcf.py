import os

def findnum(allele):
    if allele == "A":
        return("01")
    elif allele == "C":
        return("02")
    elif allele == "G":
        return("03")
    elif allele == "T":
        return("04")
    else:
        print("Error - no allele: " + allele)

def addgt(old,val,a1,a2):
    if val == "./.":
        old.append("0000")
    else:
        gt = ""
        al = val.split("/")
        for a in al:
            if int(a) == 0:
                gt = gt + findnum(a1)
            elif int(a) == 1:
                gt = gt + findnum(a2)
            else:
                print("Error - no allele: " + a)
        old.append(gt)
    return(old)

def filter_loci(file1,cov,mcov,maf):
    locs = []
    data = {}
    for line in open(file1):
        if line.startswith("#CHROM"):
            inds = line.rstrip("\n").split("\t")[9:]
        elif line.startswith("#") == False:
            line2 = line.rstrip("\n").split("\t")
            loc = line2[0]
            pos = line2[1]
            a1 = line2[3]
            a2 = line2[4]
            ns = int(line2[7].split(";")[0].split("=")[1])
            af = float(line2[7].split(";")[1].split("=")[1])
            if ns/len(inds) > mcov and af > maf:
                locs.append(loc + "_" + pos)
                for i in range(0,len(inds)):
                    ind = inds[i]
                    old = data.get(ind,[])
                    val = line2[9+i].split(":")[0]
                    if len(line2[9+i].split(":")) > 2:
                        co = int(line2[9+i].split(":")[1])
                        if co >= cov:
                            old = addgt(old,val,a1,a2)
                        else:
                            old = addgt(old,"./.",a1,a2)
                    else:
                        old = addgt(old,val,a1,a2)
                    data[ind] = old
    return(data,locs)

def write_output(file,locs,data):
    out = open(output, "w")
    out.write(output + " generated by vcf_genepop.py")
    out.write("\n" + ",".join(locs))
    out.write("\n" + "POP")
    for ind in sorted(data.keys()):
        values = data.get(ind)
        out.write("\n" + ind + " ,  " + "\t".join(values))
    out.close()

cov = 8
mcov = 0
maf = 0

gmaf = 0.05
gmmds = [0.2]
gmmdi = [0.0,1.0]
fixed = True
single = True
lfmm = True

folderVcf = "vcf"
snpsEnding = "_snps.vcf"

try:
    os.stat("genepop")
except:
    os.mkdir("genepop")

try:
    os.stat("log")
except:
    os.mkdir("log")


if lfmm == True:
    try:
        os.stat("lfmm")
    except:
        os.mkdir("lfmm")


for file1 in os.listdir(folderVcf):
    for gmds in gmmds:
        for gmdi in gmmdi:
            if file1.endswith(snpsEnding):
                name = file1.split(".")[0] + "_c" + str(cov) + ".pop"
                output = "genepop/" + file1.split(".")[0] + "_c" + str(cov) + ".pop"
                print(name)
                if name in os.listdir("genepop"):
                    print(file1 + " present")
                else:
                    data,locs = filter_loci(folderVcf + "/" + file1,cov,mcov,maf)
                    write_output(output,locs,data)
                    print(file1 + " done")

                out = file1.split(".")[0] + "_c" + str(cov) + "_maf" + str(gmaf).split(".")[1] + "_mds" + str(gmds).split(".")[1]  + "_mdi" + str(gmdi).split(".")[0] + str(gmdi).split(".")[1]
                com = "python modifyGenepop.py -i " + output
                com = com + " --maf " + str(gmaf) + " --mds " + str(gmds) + " --mdi " + str(gmdi)
                if fixed == True:
                    com = com + " --fix"
                    out = out + "_fi"
                if single == True:
                    com = com + " --single"
                    out = out + "_si"
                if lfmm == True:
                    com = com + " -L lfmm/" + out + ".lfmm"
                log = "log/" + out + ".log"
                com = com + " -G genepop/" + out + ".pop" + " > " + log
                if (out + ".pop") in os.listdir("genepop"):
                    print("{} already present".format(out))
                else:
                    os.system(com)
                    print("{} finished".format(out))
